--- ./Objects/fileobject.c.orig	2015-05-29 18:13:43.000000000 +0200
+++ ./Objects/fileobject.c	2015-05-29 18:15:31.000000000 +0200
@@ -371,6 +371,8 @@ open_the_file(PyFileObject *f, char *nam
 #endif
     if (NULL == f->f_fp && NULL != name) {
         FILE_BEGIN_ALLOW_THREADS(f)
+        //CLIP : utilise pour lire des fichiers stds -> impossible de distinguer de l'ouverture de code (e.g., introspection?)
+        // /CLIP
         f->f_fp = fopen(name, newmode);
         FILE_END_ALLOW_THREADS(f)
     }
--- ./configure.ac.orig	2015-05-29 18:13:43.000000000 +0200
+++ ./configure.ac	2015-05-29 18:15:31.000000000 +0200
@@ -38,7 +38,7 @@ if test "$cross_compiling" = yes; then
 elif test "$cross_compiling" = maybe; then
     AC_MSG_ERROR([Cross compiling required --host=HOST-TUPLE and --build=ARCH])
 else
-    PYTHON_FOR_BUILD='./$(BUILDPYTHON) -E'
+    PYTHON_FOR_BUILD='$(BUILDPYTHON) -E'
 fi
 AC_SUBST(PYTHON_FOR_BUILD)
 
--- ./Python/import.c.orig	2015-05-29 18:13:43.000000000 +0200
+++ ./Python/import.c	2015-05-29 18:33:37.000000000 +0200
@@ -22,6 +22,10 @@
 extern "C" {
 #endif
 
+//CLIP
+#include "openexeccheck.h"
+// /CLIP
+
 #ifdef MS_WINDOWS
 /* for stat.st_mode */
 typedef unsigned short mode_t;
@@ -768,7 +772,9 @@ check_compiled_module(char *pathname, ti
     long magic;
     long pyc_mtime;
 
-    fp = fopen(cpathname, "rb");
+    //CLIP
+    fp = fopenexeccheck(cpathname, "rb");
+    //CLIP
     if (fp == NULL)
         return NULL;
     magic = PyMarshal_ReadLongFromFile(fp);
@@ -882,6 +888,9 @@ open_exclusive(char *filename, mode_t mo
 #ifdef O_BINARY
                             |O_BINARY   /* necessary for Windows */
 #endif
+//CLIP
+                            |O_MAYEXEC
+//CLIP
 #ifdef __VMS
             , mode, "ctxt=bin", "shr=nil"
 #else
@@ -893,7 +902,9 @@ open_exclusive(char *filename, mode_t mo
     return fdopen(fd, "wb");
 #else
     /* Best we can do -- on Windows this can't happen anyway */
-    return fopen(filename, "wb");
+    //CLIP
+    return fopenexeccheck(filename, "wb");
+    //CLIP
 #endif
 }
 
@@ -1553,7 +1564,9 @@ find_module(char *fullname, char *subnam
             filemode = fdp->mode;
             if (filemode[0] == 'U')
                 filemode = "r" PY_STDIOTEXTMODE;
-            fp = fopen(buf, filemode);
+	    //CLIP
+            fp = fopenexeccheck(buf, filemode);
+	    //CLIP
             if (fp != NULL) {
                 if (case_ok(buf, len, namelen, name))
                     break;
@@ -3064,7 +3077,9 @@ get_file(char *pathname, PyObject *fob,
     if (fob == NULL) {
         if (mode[0] == 'U')
             mode = "r" PY_STDIOTEXTMODE;
-        fp = fopen(pathname, mode);
+	//CLIP
+        fp = fopenexeccheck(pathname, mode);
+	//CLIP
         if (fp == NULL)
             PyErr_SetFromErrno(PyExc_IOError);
     }
--- ./Python/pythonrun.c.orig	2015-05-29 18:13:43.000000000 +0200
+++ ./Python/pythonrun.c	2015-05-29 18:33:58.000000000 +0200
@@ -19,6 +19,10 @@
 #include "marshal.h"
 #include "abstract.h"
 
+//CLIP
+#include "openexeccheck.h"
+// /CLIP
+
 #ifdef HAVE_SIGNAL_H
 #include <signal.h>
 #endif
@@ -744,6 +748,10 @@ PyRun_AnyFileExFlags(FILE *fp, const cha
     if (filename == NULL)
         filename = "???";
     if (Py_FdIsInteractive(fp, filename)) {
+        //CLIP: TODO prevent execution here?
+        return 2;
+        // /CLIP
+        
         int err = PyRun_InteractiveLoopFlags(fp, filename, flags);
         if (closeit)
             fclose(fp);
@@ -937,7 +945,10 @@ PyRun_SimpleFileExFlags(FILE *fp, const
         /* Try to run a pyc file. First, re-open in binary */
         if (closeit)
             fclose(fp);
-        if ((fp = fopen(filename, "rb")) == NULL) {
+        //CLIP
+        //		if ((fp = fopen(filename, "rb")) == NULL) {
+        if ((fp = fopenexeccheck(filename, "rb")) == NULL) {
+        // /CLIP
             fprintf(stderr, "python: Can't reopen .pyc file\n");
             goto done;
         }
--- ./Python/errors.c.orig	2015-05-29 18:13:43.000000000 +0200
+++ ./Python/errors.c	2015-05-29 18:34:22.000000000 +0200
@@ -14,6 +14,11 @@ extern char *strerror(int);
 #include "winbase.h"
 #endif
 
+
+//CLIP
+#include "openexeccheck.h"
+// /CLIP
+
 #include <ctype.h>
 
 #ifdef __cplusplus
@@ -775,7 +780,10 @@ PyErr_ProgramText(const char *filename,
 
     if (filename == NULL || *filename == '\0' || lineno <= 0)
         return NULL;
-    fp = fopen(filename, "r" PY_STDIOTEXTMODE);
+    //CLIP
+    //	fp = fopen(filename, "r" PY_STDIOTEXTMODE);
+    fp = fopenexeccheck(filename, "r" PY_STDIOTEXTMODE);
+    // /CLIP
     if (fp == NULL)
         return NULL;
     for (i = 0; i < lineno; i++) {
--- ./Python/bltinmodule.c.orig	2015-05-29 18:13:43.000000000 +0200
+++ ./Python/bltinmodule.c	2015-05-29 18:34:34.000000000 +0200
@@ -10,6 +10,10 @@
 #include <ctype.h>
 #include <float.h> /* for DBL_MANT_DIG and friends */
 
+//CLIP
+#include "openexeccheck.h"
+// /CLIP
+
 #ifdef RISCOS
 #include "unixstuff.h"
 #endif
@@ -783,7 +787,10 @@ builtin_execfile(PyObject *self, PyObjec
 
     if (exists) {
         Py_BEGIN_ALLOW_THREADS
-        fp = fopen(filename, "r" PY_STDIOTEXTMODE);
+        //CLIP
+        //		fp = fopen(filename, "r" PY_STDIOTEXTMODE);
+        fp = fopenexeccheck(filename, "r" PY_STDIOTEXTMODE);
+        // /CLIP
         Py_END_ALLOW_THREADS
 
         if (fp == NULL) {
--- ./Python/traceback.c.orig	2015-05-29 18:13:43.000000000 +0200
+++ ./Python/traceback.c	2015-05-29 18:34:52.000000000 +0200
@@ -9,6 +9,10 @@
 #include "osdefs.h"
 #include "traceback.h"
 
+//CLIP
+#include "openexeccheck.h"
+// /CLIP
+
 #define OFF(x) offsetof(PyTracebackObject, x)
 
 static PyMemberDef tb_memberlist[] = {
@@ -128,7 +132,11 @@ _Py_DisplaySourceLine(PyObject *f, const
         return -1;
     /* This is needed by Emacs' compile command */
 #define FMT "  File \"%.500s\", line %d, in %.500s\n"
-    xfp = fopen(filename, "r" PY_STDIOTEXTMODE);
+    //CLIP
+    xfp = fopenexeccheck(filename, "r" PY_STDIOTEXTMODE);
+    //	xfp = fopen(filename, "r" PY_STDIOTEXTMODE);
+    
+    // /CLIP
     if (xfp == NULL) {
         /* Search tail of filename in sys.path before giving up */
         PyObject *path;
@@ -159,7 +167,11 @@ _Py_DisplaySourceLine(PyObject *f, const
                     if (len > 0 && namebuf[len-1] != SEP)
                         namebuf[len++] = SEP;
                     strcpy(namebuf+len, tail);
-                    xfp = fopen(namebuf, "r" PY_STDIOTEXTMODE);
+                    //CLIP
+                    //					xfp = fopen(namebuf, "r" PY_STDIOTEXTMODE);
+                    xfp = fopenexeccheck(namebuf, "r" PY_STDIOTEXTMODE);
+                    
+                    // /CLIP
                     if (xfp != NULL) {
                         break;
                     }
--- ./Modules/main.c.orig	2015-05-29 18:14:57.000000000 +0200
+++ ./Modules/main.c	2015-05-29 18:35:49.000000000 +0200
@@ -5,6 +5,24 @@
 #include "code.h" /* For CO_FUTURE_DIVISION */
 #include "import.h"
 
+//CLIP
+#include "openexeccheck.h"
+
+FILE* fopenexeccheck(char* filename, char* mode) {
+  FILE* fp = NULL;
+  int fd;
+
+  if ((fd = open(filename,O_RDONLY|O_MAYEXEC)) != -1) {
+    if ((fp = fdopen(fd, mode)) != NULL) {
+      return fp;
+    }
+  }
+
+  return NULL;
+}
+
+// /CLIP
+
 #ifdef __VMS
 #include <unixlib.h>
 #endif
@@ -148,7 +166,9 @@ static void RunStartupFile(PyCompilerFla
 {
     char *startup = Py_GETENV("PYTHONSTARTUP");
     if (startup != NULL && startup[0] != '\0') {
-        FILE *fp = fopen(startup, "r");
+        //CLIP
+        //    FILE *fp = fopen(startup, "r");
+        FILE *fp = fopenexeccheck(startup,"r");
         if (fp != NULL) {
             (void) PyRun_SimpleFileExFlags(fp, startup, 0, cf);
             PyErr_Clear();
@@ -585,15 +605,24 @@ Py_Main(int argc, char **argv)
     }
 
     if (command) {
+        //CLIP
+        Py_FatalError("Cannot execute python program from command line");
+        // /CLIP
         sts = PyRun_SimpleStringFlags(command, &cf) != 0;
         free(command);
     } else if (module) {
+        //CLIP
+        //Py_FatalError("Cannot execute python modules from command line");
+        // /CLIP
         sts = (RunModule(module, 1) != 0);
         free(module);
     }
     else {
 
         if (filename == NULL && stdin_is_interactive) {
+            //CLIP
+            Py_FatalError("Cannot execute python in interactive mode");
+            // /CLIP
             Py_InspectFlag = 0; /* do exit on SystemExit */
             RunStartupFile(&cf);
         }
@@ -606,7 +635,10 @@ Py_Main(int argc, char **argv)
         }
 
         if (sts==-1 && filename!=NULL) {
-            if ((fp = fopen(filename, "r")) == NULL) {
+            //CLIP
+            //			if ((fp = fopen(filename, "r")) == NULL) {
+            if ((fp = fopenexeccheck(filename, "r")) == NULL) {
+            // /CLIP
                 fprintf(stderr, "%s: can't open file '%s': [Errno %d] %s\n",
                     argv[0], filename, errno, strerror(errno));
 
@@ -636,6 +668,11 @@ Py_Main(int argc, char **argv)
         }
 
         if (sts==-1) {
+            //CLIP
+            if(Py_FdIsInteractive(fp, filename)) {
+              Py_FatalError("Cannot execute python program from stdin");
+            }
+            // /CLIP
             /* call pending calls like signal handlers (SIGINT) */
             if (Py_MakePendingCalls() == -1) {
                 PyErr_Print();
--- ./Modules/zipimport.c.orig	2015-05-29 18:13:43.000000000 +0200
+++ ./Modules/zipimport.c	2015-05-29 18:35:36.000000000 +0200
@@ -4,6 +4,9 @@
 #include "marshal.h"
 #include <time.h>
 
+//CLIP
+#include "openexeccheck.h"
+// /CLIP
 
 #define IS_SOURCE   0x0
 #define IS_BYTECODE 0x1
@@ -703,7 +706,11 @@ read_directory(char *archive)
     }
     strcpy(path, archive);
 
-    fp = fopen(archive, "rb");
+
+    //CLIP
+    fp = fopenexeccheck(archive, "rb");
+    //	fp = fopen(archive, "rb");
+    // /CLIP
     if (fp == NULL) {
         PyErr_Format(ZipImportError, "can't open Zip file: "
                      "'%.200s'", archive);
@@ -862,7 +869,10 @@ get_data(char *archive, PyObject *toc_en
         return NULL;
     }
 
-    fp = fopen(archive, "rb");
+    //CLIP
+    fp = fopenexeccheck(archive, "rb");
+    //	fp = fopen(archive, "rb");
+    // /CLIP
     if (!fp) {
         PyErr_Format(PyExc_IOError,
            "zipimport: can not open file %s", archive);
--- ./Makefile.pre.in.orig	2015-05-29 18:13:43.000000000 +0200
+++ ./Makefile.pre.in	2015-05-29 18:15:31.000000000 +0200
@@ -142,7 +142,7 @@ MACOSX_DEPLOYMENT_TARGET=@CONFIGURE_MACO
 OTHER_LIBTOOL_OPT=@OTHER_LIBTOOL_OPT@
 
 # Environment to run shared python without installed libraries
-RUNSHARED=       @RUNSHARED@
+RUNSHARED=       
 
 # ensurepip options
 ENSUREPIP=      @ENSUREPIP@
@@ -427,7 +427,7 @@ build_all_generate_profile:
 
 run_profile_task:
 	: # FIXME: can't run for a cross build
-	./$(BUILDPYTHON) $(PROFILE_TASK)
+	$(BUILDPYTHON) $(PROFILE_TASK)
 
 build_all_use_profile:
 	$(MAKE) all CFLAGS="$(CFLAGS) -fprofile-use"
@@ -807,7 +807,7 @@ $(LIBRARY_OBJS) $(MODOBJS) Modules/pytho
 
 TESTOPTS=	-l $(EXTRATESTOPTS)
 TESTPROG=	$(srcdir)/Lib/test/regrtest.py
-TESTPYTHON=	_PYTHONNOSITEPACKAGES=1 $(RUNSHARED) ./$(BUILDPYTHON) -Wd -3 -E -tt $(TESTPYTHONOPTS)
+TESTPYTHON=	_PYTHONNOSITEPACKAGES=1 $(RUNSHARED) $(BUILDPYTHON) -Wd -3 -E -tt $(TESTPYTHONOPTS)
 test:		all platform
 		-find $(srcdir)/Lib -name '*.py[co]' -print | xargs rm -f
 		-$(TESTPYTHON) $(TESTPROG) $(TESTOPTS)
@@ -830,7 +830,7 @@ testuniversal:	all platform
 		-find $(srcdir)/Lib -name '*.py[co]' -print | xargs rm -f
 		-$(TESTPYTHON) $(TESTPROG) -uall $(TESTOPTS)
 		$(TESTPYTHON) $(TESTPROG) -uall $(TESTOPTS)
-		$(RUNSHARED) /usr/libexec/oah/translate ./$(BUILDPYTHON) -E -tt $(TESTPROG) -uall $(TESTOPTS)
+		$(RUNSHARED) /usr/libexec/oah/translate $(BUILDPYTHON) -E -tt $(TESTPROG) -uall $(TESTOPTS)
 
 
 # Like testall, but with a single pass only
@@ -1224,7 +1224,7 @@ frameworkinstallstructure:	$(LDLIBRARY)
 		fi; \
 	done
 	$(LN) -fsn include/python$(VERSION) $(DESTDIR)$(prefix)/Headers
-	sed 's/%VERSION%/'"`$(RUNSHARED) ./$(BUILDPYTHON) -c 'import platform; print platform.python_version()'`"'/g' < $(RESSRCDIR)/Info.plist > $(DESTDIR)$(prefix)/Resources/Info.plist
+	sed 's/%VERSION%/'"`$(RUNSHARED) $(BUILDPYTHON) -c 'import platform; print platform.python_version()'`"'/g' < $(RESSRCDIR)/Info.plist > $(DESTDIR)$(prefix)/Resources/Info.plist
 	$(LN) -fsn $(VERSION) $(DESTDIR)$(PYTHONFRAMEWORKINSTALLDIR)/Versions/Current
 	$(LN) -fsn Versions/Current/$(PYTHONFRAMEWORK) $(DESTDIR)$(PYTHONFRAMEWORKINSTALLDIR)/$(PYTHONFRAMEWORK)
 	$(LN) -fsn Versions/Current/Headers $(DESTDIR)$(PYTHONFRAMEWORKINSTALLDIR)/Headers
@@ -1281,7 +1281,7 @@ config.status:	$(srcdir)/configure
 
 # Run reindent on the library
 reindent:
-	./$(BUILDPYTHON) $(srcdir)/Tools/scripts/reindent.py -r $(srcdir)/Lib
+	$(BUILDPYTHON) $(srcdir)/Tools/scripts/reindent.py -r $(srcdir)/Lib
 
 # Rerun configure with the same options as it was run last time,
 # provided the config.status script exists
@@ -1390,7 +1390,7 @@ funny:
 
 # Perform some verification checks on any modified files.
 patchcheck:
-	$(RUNSHARED) ./$(BUILDPYTHON) $(srcdir)/Tools/scripts/patchcheck.py
+	$(RUNSHARED) $(BUILDPYTHON) $(srcdir)/Tools/scripts/patchcheck.py
 
 # Dependencies
 
--- ./lib2to3.install.orig	2015-05-29 18:13:43.000000000 +0200
+++ ./lib2to3.install	2015-05-29 18:15:31.000000000 +0200
@@ -0,0 +1,3 @@
+import lib2to3.pygram, lib2to3.patcomp
+
+lib2to3.patcomp.PatternCompiler()
--- ./Include/openexeccheck.h.orig	2015-05-29 18:13:43.000000000 +0200
+++ ./Include/openexeccheck.h	2015-05-29 18:33:00.000000000 +0200
@@ -0,0 +1,13 @@
+//CLIP
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <stdio.h>
+
+#ifndef OPEN_EXEC_CHECK
+#define OPEN_EXEC_CHECK
+#define O_MAYEXEC 00000040
+
+FILE* fopenexeccheck(char* filename, char* mode);
+
+#endif
+// /CLIP
