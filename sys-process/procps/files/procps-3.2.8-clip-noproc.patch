--- proc/sysinfo.c.orig	2011-08-30 13:45:20.000000000 +0200
+++ proc/sysinfo.c	2011-08-30 13:48:24.000000000 +0200
@@ -14,6 +14,7 @@
 #include <string.h>
 #include <ctype.h>
 #include <locale.h>
+#include <errno.h>
 
 #include <unistd.h>
 #include <fcntl.h>
@@ -51,21 +52,25 @@ static char buf[2048];
  * that successive calls to the functions are more efficient.
  * It also reads the current contents of the file into the global buf.
  */
-#define FILE_TO_BUF(filename, fd) do{				\
-    static int local_n;						\
-    if (fd == -1 && (fd = open(filename, O_RDONLY)) == -1) {	\
-	fputs(BAD_OPEN_MESSAGE, stderr);			\
-	fflush(NULL);						\
-	_exit(102);						\
-    }								\
-    lseek(fd, 0L, SEEK_SET);					\
-    if ((local_n = read(fd, buf, sizeof buf - 1)) < 0) {	\
-	perror(filename);					\
-	fflush(NULL);						\
-	_exit(103);						\
-    }								\
-    buf[local_n] = '\0';					\
-}while(0)
+static inline void FILE_TO_BUF(const char *filename, int fd) {
+    static int local_n;
+    if (fd == -1 && (fd = open(filename, O_RDONLY)) == -1) {
+    	if (errno == ENOENT) {
+		buf[0] = '\0';
+		return;
+	}
+	fputs(BAD_OPEN_MESSAGE, stderr);
+	fflush(NULL);	
+	_exit(102);
+    }
+    lseek(fd, 0L, SEEK_SET);
+    if ((local_n = read(fd, buf, sizeof buf - 1)) < 0) {
+	perror(filename);
+	fflush(NULL);
+	_exit(103);
+    }
+    buf[local_n] = '\0';
+}
 
 /* evals 'x' twice */
 #define SET_IF_DESIRED(x,y) do{  if(x) *(x) = (y); }while(0)
