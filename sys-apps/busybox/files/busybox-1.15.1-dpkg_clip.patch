--- archival/dpkg.c.orig	2009-09-12 17:55:58.000000000 +0200
+++ archival/dpkg.c	2009-10-02 16:33:41.000000000 +0200
@@ -782,8 +782,8 @@ static void write_buffer_no_status(FILE 
 /* This could do with a cleanup */
 static void write_status_file(deb_file_t **deb_file)
 {
-	FILE *old_status_file = xfopen_for_read("/var/lib/dpkg/status");
-	FILE *new_status_file = xfopen_for_write("/var/lib/dpkg/status.udeb");
+	FILE *old_status_file = xfopen_for_read("/var/pkg/lib/dpkg/status");
+	FILE *new_status_file = xfopen_for_write("/var/pkg/lib/dpkg/status.udeb");
 	char *package_name;
 	char *status_from_file;
 	char *control_buffer = NULL;
@@ -910,7 +910,7 @@ static void write_status_file(deb_file_t
 	fclose(new_status_file);
 
 	/* Create a separate backfile to dpkg */
-	if (rename("/var/lib/dpkg/status", "/var/lib/dpkg/status.udeb.bak") == -1) {
+	if (rename("/var/pkg/lib/dpkg/status", "/var/pkg/lib/dpkg/status.udeb.bak") == -1) {
 		if (errno != ENOENT)
 			bb_error_msg_and_die("cannot create backup status file");
 		/* Its ok if renaming the status file fails because status
@@ -918,7 +918,7 @@ static void write_status_file(deb_file_t
 		bb_error_msg("no status file found, creating new one");
 	}
 
-	xrename("/var/lib/dpkg/status.udeb", "/var/lib/dpkg/status");
+	xrename("/var/pkg/lib/dpkg/status.udeb", "/var/pkg/lib/dpkg/status");
 }
 
 /* This function returns TRUE if the given package can satisfy a
@@ -1208,7 +1208,7 @@ static void run_package_script_or_die(co
 	char *script_path;
 	int result;
 
-	script_path = xasprintf("/var/lib/dpkg/info/%s.%s", package_name, script_type);
+	script_path = xasprintf("/var/pkg/lib/dpkg/info/%s.%s", package_name, script_type);
 
 	/* If the file doesnt exist is isnt fatal */
 	result = access(script_path, F_OK) ? EXIT_SUCCESS : system(script_path);
@@ -1258,10 +1258,10 @@ static char **all_control_list(const cha
 	unsigned i = 0;
 	char **remove_files;
 
-	/* Create a list of all /var/lib/dpkg/info/<package> files */
+	/* Create a list of all /var/pkg/lib/dpkg/info/<package> files */
 	remove_files = xzalloc(sizeof(all_control_files) + sizeof(char*));
 	while (i < ARRAY_SIZE(all_control_files)) {
-		remove_files[i] = xasprintf("/var/lib/dpkg/info/%s.%s",
+		remove_files[i] = xasprintf("/var/pkg/lib/dpkg/info/%s.%s",
 				package_name, all_control_files[i]);
 		i++;
 	}
@@ -1342,10 +1342,10 @@ static void remove_package(const unsigne
 	run_package_script_or_die(package_name, "prerm");
 
 	/* Create a list of files to remove, and a separate list of those to keep */
-	sprintf(list_name, "/var/lib/dpkg/info/%s.%s", package_name, "list");
+	sprintf(list_name, "/var/pkg/lib/dpkg/info/%s.%s", package_name, "list");
 	remove_files = create_list(list_name);
 
-	sprintf(conffile_name, "/var/lib/dpkg/info/%s.%s", package_name, "conffiles");
+	sprintf(conffile_name, "/var/pkg/lib/dpkg/info/%s.%s", package_name, "conffiles");
 	exclude_files = create_list(conffile_name);
 
 	/* Some directories can't be removed straight away, so do multiple passes */
@@ -1354,12 +1354,12 @@ static void remove_package(const unsigne
 	free_array(exclude_files);
 	free_array(remove_files);
 
-	/* Create a list of files in /var/lib/dpkg/info/<package>.* to keep */
+	/* Create a list of files in /var/pkg/lib/dpkg/info/<package>.* to keep */
 	exclude_files = xzalloc(sizeof(exclude_files[0]) * 3);
 	exclude_files[0] = xstrdup(conffile_name);
-	exclude_files[1] = xasprintf("/var/lib/dpkg/info/%s.%s", package_name, "postrm");
+	exclude_files[1] = xasprintf("/var/pkg/lib/dpkg/info/%s.%s", package_name, "postrm");
 
-	/* Create a list of all /var/lib/dpkg/info/<package> files */
+	/* Create a list of all /var/pkg/lib/dpkg/info/<package> files */
 	remove_files = all_control_list(package_name);
 
 	remove_file_array(remove_files, exclude_files);
@@ -1390,7 +1390,7 @@ static void purge_package(const unsigned
 	run_package_script_or_die(package_name, "prerm");
 
 	/* Create a list of files to remove */
-	sprintf(list_name, "/var/lib/dpkg/info/%s.%s", package_name, "list");
+	sprintf(list_name, "/var/pkg/lib/dpkg/info/%s.%s", package_name, "list");
 	remove_files = create_list(list_name);
 
 	/* Some directories cant be removed straight away, so do multiple passes */
@@ -1398,12 +1398,12 @@ static void purge_package(const unsigned
 		continue;
 	free_array(remove_files);
 
-	/* Create a list of all /var/lib/dpkg/info/<package> files */
+	/* Create a list of all /var/pkg/lib/dpkg/info/<package> files */
 	remove_files = all_control_list(package_name);
 
 	/* Delete all of them except the postrm script */
 	exclude_files = xzalloc(sizeof(exclude_files[0]) * 2);
-	exclude_files[0] = xasprintf("/var/lib/dpkg/info/%s.%s", package_name, "postrm");
+	exclude_files[0] = xasprintf("/var/pkg/lib/dpkg/info/%s.%s", package_name, "postrm");
 	remove_file_array(remove_files, exclude_files);
 	free_array(exclude_files);
 
@@ -1515,8 +1515,8 @@ static void unpack_package(deb_file_t *d
 		printf("Unpacking %s (from %s)...\n", package_name, deb_file->filename);
 	}
 
-	/* Extract control.tar.gz to /var/lib/dpkg/info/<package>.filename */
-	info_prefix = xasprintf("/var/lib/dpkg/info/%s.%s", package_name, "");
+	/* Extract control.tar.gz to /var/pkg/lib/dpkg/info/<package>.filename */
+	info_prefix = xasprintf("/var/pkg/lib/dpkg/info/%s.%s", package_name, "");
 	archive_handle = init_archive_deb_ar(deb_file->filename);
 	init_archive_deb_control(archive_handle);
 
@@ -1546,7 +1546,7 @@ static void unpack_package(deb_file_t *d
 	unpack_ar_archive(archive_handle);
 
 	/* Create the list file */
-	list_filename = xasprintf("/var/lib/dpkg/info/%s.%s", package_name, "list");
+	list_filename = xasprintf("/var/pkg/lib/dpkg/info/%s.%s", package_name, "list");
 	out_stream = xfopen_for_write(list_filename);
 	while (archive_handle->sub_archive->passed) {
 		/* the leading . has been stripped by data_extract_all_prefix already */
@@ -1622,7 +1622,7 @@ int dpkg_main(int argc UNUSED_PARAM, cha
 		bb_show_usage();
 
 /*	puts("(Reading database ... xxxxx files and directories installed.)"); */
-	index_status_file("/var/lib/dpkg/status");
+	index_status_file("/var/pkg/lib/dpkg/status");
 
 	/* if the list action was given print the installed packages and exit */
 	if (opt & OPT_list_installed) {
