Index: chromium-61.0.3163.79/device/udev_linux/udev_linux.cc
===================================================================
--- chromium-61.0.3163.79.orig/device/udev_linux/udev_linux.cc
+++ chromium-61.0.3163.79/device/udev_linux/udev_linux.cc
@@ -16,6 +16,7 @@ UdevLinux::UdevLinux(const std::vector<U
       monitor_(udev_monitor_new_from_netlink(udev_.get(), "udev")),
       monitor_fd_(-1),
       callback_(callback) {
+#if 0
   CHECK(udev_);
   CHECK(monitor_);
 
@@ -33,6 +34,7 @@ UdevLinux::UdevLinux(const std::vector<U
   monitor_watch_controller_ = base::FileDescriptorWatcher::WatchReadable(
       monitor_fd_, base::Bind(&UdevLinux::OnMonitorCanReadWithoutBlocking,
                               base::Unretained(this)));
+#endif
 }
 
 UdevLinux::~UdevLinux() = default;
@@ -45,11 +47,13 @@ void UdevLinux::OnMonitorCanReadWithoutB
   // Events occur when devices attached to the system are added, removed, or
   // change state. udev_monitor_receive_device() will return a device object
   // representing the device which changed and what type of change occured.
+#if 0
   ScopedUdevDevicePtr dev(udev_monitor_receive_device(monitor_.get()));
   if (!dev)
     return;
 
   callback_.Run(dev.get());
+#endif
 }
 
 }  // namespace device
Index: chromium-61.0.3163.79/device/usb/usb_service_linux.cc
===================================================================
--- chromium-61.0.3163.79.orig/device/usb/usb_service_linux.cc
+++ chromium-61.0.3163.79/device/usb/usb_service_linux.cc
@@ -104,10 +104,12 @@ void UsbServiceLinux::FileThreadHelper::
   DCHECK(sequence_checker_.CalledOnValidSequence());
   base::ThreadRestrictions::AssertIOAllowed();
 
+  /*
   watcher_ = UdevWatcher::StartWatching(this);
   watcher_->EnumerateExistingDevices();
   task_runner_->PostTask(FROM_HERE,
                          base::Bind(&UsbServiceLinux::HelperStarted, service_));
+  */
 }
 
 void UsbServiceLinux::FileThreadHelper::OnDeviceAdded(
Index: chromium-61.0.3163.79/device/hid/hid_service_linux.cc
===================================================================
--- chromium-61.0.3163.79.orig/device/hid/hid_service_linux.cc
+++ chromium-61.0.3163.79/device/hid/hid_service_linux.cc
@@ -85,11 +85,13 @@ class HidServiceLinux::BlockingTaskHelpe
     base::ThreadRestrictions::AssertIOAllowed();
     DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
 
+    /*
     watcher_ = UdevWatcher::StartWatching(this);
     watcher_->EnumerateExistingDevices();
     task_runner_->PostTask(
         FROM_HERE,
         base::Bind(&HidServiceLinux::FirstEnumerationComplete, service_));
+    */
   }
 
  private:
Index: chromium-61.0.3163.79/device/udev_linux/udev_watcher.cc
===================================================================
--- chromium-61.0.3163.79.orig/device/udev_linux/udev_watcher.cc
+++ chromium-61.0.3163.79/device/udev_linux/udev_watcher.cc
@@ -16,6 +16,7 @@ void UdevWatcher::Observer::OnDeviceAdde
 void UdevWatcher::Observer::OnDeviceRemoved(ScopedUdevDevicePtr device) {}
 
 std::unique_ptr<UdevWatcher> UdevWatcher::StartWatching(Observer* observer) {
+/*
   ScopedUdevPtr udev(udev_new());
   if (!udev) {
     LOG(ERROR) << "Failed to initialize udev.";
@@ -42,6 +43,8 @@ std::unique_ptr<UdevWatcher> UdevWatcher
 
   return base::WrapUnique(new UdevWatcher(
       std::move(udev), std::move(udev_monitor), monitor_fd, observer));
+*/
+  return nullptr;
 }
 
 UdevWatcher::~UdevWatcher() {
